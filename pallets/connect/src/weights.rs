
//! Autogenerated weights for `pallet_connect`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-30, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `FVFFHJF2Q05D-w3f.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_connect
// --extrinsic
// register_an_account
// --steps
// 50
// --repeat
// 20
// --output
// pallets/connect/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions for `pallet_connect`.
pub trait WeightInfo {
    fn register_an_account() -> Weight;
}

/// Weight functions for `pallet_connect`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Connect Names (r:1 w:1)
	/// Proof Skipped: Connect Names (max_values: None, max_size: None, mode: Measured)
	/// Storage: Connect RegisteredUsers (r:1 w:1)
	/// Proof Skipped: Connect RegisteredUsers (max_values: None, max_size: None, mode: Measured)
	/// Storage: InsecureRandomness RandomMaterial (r:1 w:0)
	/// Proof: InsecureRandomness RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Connect TotalRegistered (r:1 w:1)
	/// Proof Skipped: Connect TotalRegistered (max_values: Some(1), max_size: None, mode: Measured)
	fn register_an_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `47`
		//  Estimated: `4764`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(44_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}

impl WeightInfo for () {
    fn register_an_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `47`
		//  Estimated: `4764`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(44_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
}
